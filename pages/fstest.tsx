import LightningFS from "@isomorphic-git/lightning-fs";
import { Box, Button, TextInput } from "@primer/react";
import git from "isomorphic-git";
import http from "isomorphic-git/http/web";
import type { NextPage } from "next";
import Head from "next/head";
import { FormEvent, useState } from "react";
import ColorModeSwitcher from "../components/ColorModeSwitcher";
import { File } from "../types";
import { GITHUB_GIT_PROXY } from "../utils/constants";
import { flatten } from "../utils/flatten";
import { readDir } from "../utils/readDir";

const Home: NextPage = () => {
  let fs: LightningFS;
  if (typeof window !== "undefined") {
    fs = new LightningFS("fs");
  }

  const decoder = new TextDecoder();

  const dir = "/root";

  const defaultRepo = "https://github.com/drawnotes/drawnotes";

  const [repoUrl, setRepoUrl] = useState<string>(defaultRepo);

  const [loadingMessage, setLoadingMessage] = useState<string>("");
  const [files, setFiles] = useState<any[] | null>(null);
  const [fileContents, setFileContents] = useState<string | null>(null);
  const repo = repoUrl.replace("https://", "").replace("github.com/", "");
  const repoName = repo.split("/")[1];

  async function init() {
    if (repoUrl && files === null) {
      try {
        setLoadingMessage("Initializing filesystem...");
        indexedDB.deleteDatabase("fs");
        await fs.promises.mkdir(dir);
        const options = {
          fs: fs,
          http,
          dir,
          corsProxy: GITHUB_GIT_PROXY,
          url: repoUrl,
          ref: "master",
          singleBranch: true,
          depth: 10,
        };
        setLoadingMessage("Cloning from GitHub...");
        try {
          await git.clone(options);
          setLoadingMessage("Reading files...");
          const fileList = await readDir(fs, dir);
          const flattened = flatten(fileList);
          setFiles(flattened);
          setLoadingMessage("Done.");
        } catch (error) {
          setLoadingMessage(
            "That repo doesn't seem to exist or may be private."
          );
        }
      } catch (err) {
        const error: any = err;
        if (error.message !== "EEXIST") {
        }
      }
    }
  }

  const handleInit = async () => {
    await init();
  };

  const handleClear = async () => {
    setFiles(null);
    setFileContents(null);
    indexedDB.deleteDatabase("fs");
  };

  const handleOpen = async (file: File) => {
    const contents = (await fs.promises.readFile(file.path)) as BufferSource;
    const decoded = decoder.decode(contents);
    setFileContents(decoded);
  };

  const handleChange = (event: FormEvent<HTMLInputElement>) => {
    const input = event.currentTarget.value;
    setRepoUrl(input);
  };

  return (
    <Box bg="canvas.default" color="fg.default">
      <ColorModeSwitcher />
      <Box>
        <Head>
          <title>Next-FS</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Box>
          <Box
            className="test"
            style={{
              height: "50vh",
              outline: "1px solid grey",
            }}
          >
            <Box
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
                height: "100%",
              }}
            >
              <h1>
                Performance Tests for{" "}
                <a href="https://github.com/isomorphic-git/lightning-fs">
                  LightningFS
                </a>
              </h1>
              <br />
              <Box>
                GitHub repo URL:{" "}
                <TextInput
                  name="repo"
                  type="text"
                  onChange={handleChange}
                  defaultValue={defaultRepo}
                  spellCheck="false"
                  autoCorrect="false"
                  style={{ width: "400px", fontSize: "1rem" }}
                />
              </Box>
              <br />
              <Box>{repoName}</Box>
              <br />
              <Box style={{ display: "flex", flexDirection: "row" }}>
                <Button onClick={handleInit}>Clone repo</Button>
                <Button onClick={handleClear}>Clear filesystem</Button>
              </Box>
              <br />
              <Box>{loadingMessage}</Box>
              <br />
              <Box style={{ height: "100%", overflow: "scroll" }}>
                {files &&
                  files.map((file: File, index) => (
                    <Box
                      className="clickable"
                      onClick={() => handleOpen(file)}
                      key={index}
                    >
                      {file.name}
                    </Box>
                  ))}
              </Box>
            </Box>
          </Box>
          <Box style={{ height: "50vh", overflow: "scroll" }}>
            <Box
              style={{
                display: "flex",
                flexDirection: "column",
                alignItems: "center",
                justifyContent: "center",
              }}
            >
              <Box style={{ margin: "3rem" }}>
                <pre>{fileContents}</pre>
              </Box>
            </Box>
          </Box>
        </Box>
      </Box>
    </Box>
  );
};

export default Home;
